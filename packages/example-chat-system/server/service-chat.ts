// @generated by protobuf-ts 2.0.0-alpha.12 with parameters server_generic,client_none
// @generated from protobuf file "service-chat.proto" (package "spec", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message spec.JoinRequest
 */
export interface JoinRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
}
/**
 * @generated from protobuf message spec.ChatEvent
 */
export interface ChatEvent {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "joined";
        /**
         * @generated from protobuf field: string joined = 2;
         */
        joined: string;
    } | {
        oneofKind: "message";
        /**
         * @generated from protobuf field: string message = 3;
         */
        message: string;
    } | {
        oneofKind: "left";
        /**
         * @generated from protobuf field: string left = 4;
         */
        left: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message spec.PostRequest
 */
export interface PostRequest {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message spec.PostResponse
 */
export interface PostResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class JoinRequest$Type extends MessageType<JoinRequest> {
    constructor() {
        super("spec.JoinRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinRequest): JoinRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.JoinRequest
 */
export const JoinRequest = new JoinRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatEvent$Type extends MessageType<ChatEvent> {
    constructor() {
        super("spec.ChatEvent", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "joined", kind: "scalar", oneof: "event", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message", kind: "scalar", oneof: "event", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "left", kind: "scalar", oneof: "event", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatEvent): ChatEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string joined */ 2:
                    message.event = {
                        oneofKind: "joined",
                        joined: reader.string()
                    };
                    break;
                case /* string message */ 3:
                    message.event = {
                        oneofKind: "message",
                        message: reader.string()
                    };
                    break;
                case /* string left */ 4:
                    message.event = {
                        oneofKind: "left",
                        left: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string joined = 2; */
        if (message.event.oneofKind === "joined")
            writer.tag(2, WireType.LengthDelimited).string(message.event.joined);
        /* string message = 3; */
        if (message.event.oneofKind === "message")
            writer.tag(3, WireType.LengthDelimited).string(message.event.message);
        /* string left = 4; */
        if (message.event.oneofKind === "left")
            writer.tag(4, WireType.LengthDelimited).string(message.event.left);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.ChatEvent
 */
export const ChatEvent = new ChatEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostRequest$Type extends MessageType<PostRequest> {
    constructor() {
        super("spec.PostRequest", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostRequest): PostRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.PostRequest
 */
export const PostRequest = new PostRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostResponse$Type extends MessageType<PostResponse> {
    constructor() {
        super("spec.PostResponse", []);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostResponse): PostResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PostResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.PostResponse
 */
export const PostResponse = new PostResponse$Type();
/**
 * @generated ServiceType for protobuf service spec.ChatService
 */
export const ChatService = new ServiceType("spec.ChatService", [
    { name: "Join", serverStreaming: true, options: {}, I: JoinRequest, O: ChatEvent },
    { name: "Post", options: {}, I: PostRequest, O: PostResponse }
]);
